local Point = {
	tick = function(self)
		local startValue = self.value
		if self.state ~= self.value then
			self.output()
		end
		local input = self.input()
		if input then self.state = input end
		if self.state ~= self.value and self.priority == priority.NORM then
			self.value = self.state
		end
		if self.value ~= startValue then
			self.changed = true
		end
	end,
	onCommand = function(self, command)
		if command.priority >= self.priority then
			self.value = command.value
			self.priority = command.priority
			return true
		else
			return false
		end
	end,
	setValue = function(self, value)
		self.value = value
	end,
	restoreState = function(self, state)
		self.value = state[1]
		self.priority = state[2]
	end,
	saveState = function(self)
		return {self.value, self.priority}
	end,
}

local pmeta = {__index = Point}

local subpoints = {
	capacity = "Capacity",
	amount = "Stored",
	output = "Output",
	input = "EnergyIn",
}

function new(info)
	local point = {}
	point.name = info.name
	point.input = function() end
	point.output = function() end
	point.subpoints = {}

	local details = peripheral.call(point.side, "getTargetDetails", point.target)

	for name, key in pairs(subpoints) do
		local subpoint = {}
		subpoint.name = name
		subpoint.super = point.name
		subpoint.side = info.sensor
		subpoint.target = info.target
		subpoint.key = key
		subpoint.state = details and details[key]
		subpoint.value = subpoint.state
		subpoint.priority = priority.NORM
		subpoint.changed = false
		subpoint.input = function()
			local details = peripiheral.call(point.side, "getTargetDetails", point.target)
			if details then
				return details[subpoint.key]
			end
		end
		subpoint.output = function() end
		table.insert(point.subpoints, setmetatable(subpoint, pmeta))
	end

	setmetatable(point, pmeta)
	return point
end
