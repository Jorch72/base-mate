local sideLookup = {
	suck = {
		front = turtle.suck,
		top = turtle.suckUp,
		bottom = turtle.suckDown,
	},
	drop = {
		front = turtle.drop,
		top = turtle.dropUp,
		bottom = turtle.dropDown,
	},
}

local Point = {
	tick = function(self)
		local startValue = self.value
		if self.state ~= self.value then
			self.output()
		end
		local input = self.input()
		if input then self.state = input end
		if self.state ~= self.value and self.priority == priority.NORM then
			self.value = self.state
		end
		if self.value ~= startValue then
			self.changed = true
		end
	end,
	onCommand = function(self, command)
		if command.priority >= self.priority then
			self.value = command.value
			self.priority = command.priority
			return true
		else
			return false
		end
	end,
	setValue = function(self, value)
		self.value = value
	end,
	restoreState = function(self, state)
		self.value = state[1]
		self.priority = state[2]
	end,
	saveState = function(self)
		return {self.value, self.priority}
	end,
}

local pmeta = {__index = Point}

function new(info)
	local point = {}
	point.name = info.name
	point.side = info.side
	point.slots = info.slots
	point.state = 0
	for _, slot in ipairs(point.slots) do
		if turtle.getItemCount(slot) == 0 then
			point.state = slot
			break
		end
	end
	point.priority = priority.NORM
	point.value = point.state
	point.changed = false
	point.output = function()
		if point.state ~= 0 then
			turtle.select(point.state)
			sideLookup.suck[point.side]()
		end
		if point.value ~= 0 then
			turtle.select(point.value)
			sideLookup.drop[point.side]()
		end
	end
	point.input = function()
		local selected = 0
		for _, slot in ipairs(point.slots) do
			if turtle.getItemCount(slot) == 0 then
				selected = slot
				break
			end
		end
		return selected
	end
	setmetatable(point, pmeta)
	return point
end
